type: edu
files:
- name: src/cinema/Main.java
  visible: true
  text: |
    package cinema;

    import org.springframework.boot.SpringApplication;
    import org.springframework.boot.autoconfigure.SpringBootApplication;

    @SpringBootApplication
    public class Main {
        public static void main(String[] args) {
            SpringApplication.run(Main.class, args);
        }
    }
  learner_created: false
- name: build.gradle
  visible: true
  text: |-
    buildscript {
        repositories {
            mavenCentral()
        }
        dependencies {
            classpath "org.springframework.boot:spring-boot-gradle-plugin:$hs.spring.bootVersion"
            classpath "io.spring.gradle:dependency-management-plugin:$hs.spring.dependencyManagementVersion"
        }
    }

    apply plugin: 'java'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'

    repositories {
        mavenCentral()
    }

    sourceSets.main.resources.srcDirs = ["src/resources"]

    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter'
        implementation 'org.springframework.boot:spring-boot-starter-actuator'
        implementation 'org.springframework.boot:spring-boot-starter-web'
    }
  learner_created: false
- name: src/resources/application.properties
  visible: true
  text: |-
    server.port=28852
    management.endpoints.web.exposure.include=*
    management.endpoint.shutdown.enabled=true
  learner_created: false
- name: test/CinemaTests.java
  visible: false
  text: |-
    import cinema.Main;
    import com.google.gson.Gson;
    import com.google.gson.JsonObject;
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.dynamic.input.DynamicTesting;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.mocks.web.response.HttpResponse;
    import org.hyperskill.hstest.stage.SpringTest;
    import org.hyperskill.hstest.testcase.CheckResult;

    import java.util.Map;
    import java.util.UUID;

    import static org.hyperskill.hstest.testing.expect.Expectation.expect;
    import static org.hyperskill.hstest.testing.expect.json.JsonChecker.*;

    public class CinemaTests extends SpringTest {

        private static final String ALREADY_PURCHASED_ERROR_MESSAGE = "The ticket has been already purchased!";
        private static final String OUT_OF_BOUNDS_ERROR_MESSAGE = "The number of a row or a column is out of bounds!";
        private static final String WRONG_TOKEN_ERROR_MESSAGE = "Wrong token!";
        private static final String WRONG_PASSWORD_MESSAGE = "The password is wrong!";

        private static final Gson gson = new Gson();

        private static String token = "";

        public CinemaTests() {
            super(Main.class);
        }

        private static void checkStatusCode(HttpResponse resp, int status) {
            if (resp.getStatusCode() != status) {
                throw new WrongAnswer(
                    resp.getRequest().getMethod() + " " +
                        resp.getRequest().getLocalUri() +
                        " should respond with status code " + status + ", " +
                        "responded: " + resp.getStatusCode() + "\n\n" +
                        "Response body:\n\n" + resp.getContent()
                );
            }
        }

        CheckResult testEndpoint() {
            HttpResponse response = get("/seats").send();
            checkStatusCode(response, 200);
            return CheckResult.correct();
        }

        CheckResult testEndpointAvailableSeats() {
            HttpResponse response = get("/seats").send();
            expect(response.getContent()).asJson().check(
                isObject()
                    .value("available_seats",
                        isArray(
                            81,
                            isObject()
                                .value("row", isInteger(i -> i >= 1 && i <= 9))
                                .value("column", isInteger(i -> i >= 1 && i <= 9))
                                .value("price", isInteger(price -> price == 10 || price == 8))
                        )
                    )
                    .value("total_columns", 9)
                    .value("total_rows", 9)
            );
            return CheckResult.correct();
        }

        CheckResult testPurchaseTicket() {
            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "1",
                    "column", "1"
                ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("token", isString())
                        .value("ticket",
                            isObject()
                                .value("row", 1)
                                .value("column", 1)
                                .value("price", 10)
                        )
                );

            JsonObject object = gson.fromJson(response.getContent(), JsonObject.class);
            token = object.get("token").getAsString();

            return CheckResult.correct();
        }

        CheckResult testErrorMessageThatTicketHasBeenPurchased() {
            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "1",
                    "column", "1"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", ALREADY_PURCHASED_ERROR_MESSAGE)
                        .anyOtherValues()
                );
            return CheckResult.correct();
        }

        CheckResult testErrorMessageThatNumbersOutOfBounds() {
            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "10",
                    "column", "1"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", OUT_OF_BOUNDS_ERROR_MESSAGE)
                        .anyOtherValues()
                );

            response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "1",
                    "column", "10"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", OUT_OF_BOUNDS_ERROR_MESSAGE)
                        .anyOtherValues()
                );

            response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "-1",
                    "column", "-1"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", OUT_OF_BOUNDS_ERROR_MESSAGE)
                        .anyOtherValues()
                );


            return CheckResult.correct();
        }

        CheckResult testReturnTicket() {

            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", 2,
                    "column", 5
                ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("token", isString())
                        .value("ticket",
                            isObject()
                                .value("row", 2)
                                .value("column", 5)
                                .value("price", 10)
                        )
                );

            JsonObject jsonResponse = gson.fromJson(response.getContent(), JsonObject.class);

            String tokenFromResponse = jsonResponse.get("token").getAsString();
            String wrongToken = UUID.randomUUID().toString();

            response = post(
                "/return",
                gson.toJson(Map.of(
                    "token", wrongToken
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("error", WRONG_TOKEN_ERROR_MESSAGE)
                    .anyOtherValues()
            );

            response = post(
                "/return",
                gson.toJson(Map.of(
                    "token", tokenFromResponse
                ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("returned_ticket",
                        isObject()
                            .value("row", 2)
                            .value("column", 5)
                            .value("price", 10)
                    )
            );

            return CheckResult.correct();
        }

        CheckResult testStatsEndpoint() {

            HttpResponse response = post("/stats", "").send();
            checkStatusCode(response, 401);

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("error", WRONG_PASSWORD_MESSAGE)
                    .anyOtherValues()
            );


            return CheckResult.correct();
        }

        CheckResult testStats(int numberOfPurchasedTickets, int currentIncome, int availableSeats) {
            Map<String, String> requestParams = Map.of("password", "super_secret");
            HttpResponse response = post("/stats", requestParams).send();
            checkStatusCode(response, 200);

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("number_of_purchased_tickets", numberOfPurchasedTickets)
                    .value("current_income", currentIncome)
                    .value("number_of_available_seats", availableSeats)
            );

            return CheckResult.correct();
        }

        CheckResult returnTicket() {
            HttpResponse response = post(
                "/return",
                gson.toJson(Map.of(
                    "token", token
                ))
            ).send();

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("returned_ticket",
                        isObject()
                            .value("row", 7)
                            .value("column", 4)
                            .value("price", 8)
                    )
            );

            return CheckResult.correct();
        }

        CheckResult testPurchaseAnotherTicket() {
            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "7",
                    "column", "4"
                ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("token", isString())
                        .value("ticket",
                            isObject()
                                .value("row", 7)
                                .value("column", 4)
                                .value("price", 8)
                        )
                );

            JsonObject object = gson.fromJson(response.getContent(), JsonObject.class);
            token = object.get("token").getAsString();

            return CheckResult.correct();
        }

        @DynamicTest
        DynamicTesting[] dynamicTests = new DynamicTesting[]{
            this::testEndpoint,
            this::testEndpointAvailableSeats,
            this::testPurchaseTicket,
            this::testErrorMessageThatTicketHasBeenPurchased,
            this::testErrorMessageThatNumbersOutOfBounds,
            this::testReturnTicket,
            this::testStatsEndpoint,
            () -> testStats(1, 10, 80),
            this::testPurchaseAnotherTicket,
            () -> testStats(2, 18, 79),
            this::returnTicket,
            () -> testStats(1, 10, 80),
        };
    }
  learner_created: false
- name: src/cinema/model/Seat.java
  visible: true
  text: |
    package cinema.model;

    import com.fasterxml.jackson.annotation.JsonIgnore;

    import java.util.UUID;

    public class Seat {
        @JsonIgnore
        private UUID token;
        private int row;
        private int column;
        private int price;

        public int getPrice() {
            return price;
        }

        public void setPrice(int price) {
            this.price = price;
        }

        public int getRow() {
            return row;
        }

        public void setRow(int row) {
            this.row = row;
        }

        public int getColumn() {
            return column;
        }

        public void setColumn(int column) {
            this.column = column;
        }

        public Seat(int row, int column) {
            this.row = row;
            this.column = column;
        }

        public Seat() {
        }

        public UUID getToken() {
            return token;
        }

        public void setToken() {
            this.token = UUID.randomUUID();
        }

        @Override
        public String toString() {
            return "Seat{" +
                    "token=" + token +
                    ", row=" + row +
                    ", column=" + column +
                    ", price=" + price +
                    '}';
        }
    }
  learner_created: true
- name: src/cinema/service/MovieTheaterService.java
  visible: true
  text: |
    package cinema.service;

    import cinema.model.MovieTheater;
    import cinema.model.Seat;
    import com.fasterxml.jackson.annotation.JsonIgnore;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.stereotype.Service;

    import java.util.List;
    import java.util.Map;

    @Service
    public class MovieTheaterService {
        @Autowired
        private MovieTheater service;

        @JsonIgnore
        public Map<String, Seat> getPurchasedSeats() {
            return service.getPurchasedSeats();
        }

        public Seat findSeat(int row, int column) {
            for (Seat seat : service.getAvailableSeats()) {
                if (row == seat.getRow() && column == seat.getColumn()) {
                    return seat;
                }
            }
            return null;
        }

        public int getTotalRows() {
            return service.getTotalRows();
        }

        public int getTotalColumns() {
            return service.getTotalColumns();
        }

        public List<Seat> getAvailableSeats() {
            return service.getAvailableSeats();
        }

        public Seat findSeatByToken(String token) {
            return service.getPurchasedSeats().get(token);
        }

        @JsonIgnore
        public Map<String, Integer> getStatistic() {
            int totalCost = 0;
            for (Map.Entry<String, Seat> entry: getPurchasedSeats().entrySet()) {
                totalCost += entry.getValue().getPrice();
            }
            return Map.of("current_income", totalCost, "number_of_available_seats", getAvailableSeats().size(),
                          "number_of_purchased_tickets", getPurchasedSeats().size());
        }
    }
  learner_created: true
- name: src/cinema/exception/PurchaseException.java
  visible: true
  text: |
    package cinema.exception;

    import org.springframework.http.HttpStatus;
    import org.springframework.web.bind.annotation.ResponseStatus;

    @ResponseStatus(code = HttpStatus.BAD_REQUEST)
    public class PurchaseException extends RuntimeException{
        public PurchaseException(String message) {
            super(message);
        }
    }
  learner_created: true
- name: src/cinema/model/MovieTheater.java
  visible: true
  text: |
    package cinema.model;

    import com.fasterxml.jackson.annotation.JsonIgnore;
    import org.springframework.stereotype.Component;

    import java.util.ArrayList;
    import java.util.List;
    import java.util.Map;
    import java.util.UUID;
    import java.util.concurrent.ConcurrentHashMap;

    @Component
    public class MovieTheater {
        private int totalRows = 9;
        private int totalColumns = 9;
        private List<Seat> availableSeats;

        @JsonIgnore
        private Map<String, Seat> purchasedSeats;

        public Map<String, Seat> getPurchasedSeats() {
            return purchasedSeats;
        }

        private void initialSeats() {
            if (availableSeats == null) {
                availableSeats = new ArrayList<>();
                for (int row = 1; row <= totalRows; ++row) {
                    int price = row <= 4 ? 10: 8;
                    for (int col = 1; col <= totalColumns; ++col) {
                        Seat seat = new Seat(row, col);
                        seat.setPrice(price);
                        seat.setToken();
                        availableSeats.add(seat);
                    }
                }
            }

        }

        private void initialPurchasedSeats() {
            if (purchasedSeats == null) {
                purchasedSeats = new ConcurrentHashMap<>();
            }
        }

        public MovieTheater() {
            initialSeats();
            initialPurchasedSeats();
        }



        public int getTotalRows() {
            return totalRows;
        }

        public void setTotalRows(int totalRows) {
            this.totalRows = totalRows;
        }

        public int getTotalColumns() {
            return totalColumns;
        }

        public void setTotalColumns(int totalColumns) {
            this.totalColumns = totalColumns;
        }

        public List<Seat> getAvailableSeats() {
            return availableSeats;
        }

        public void setAvailableSeats(List<Seat> availableSeats) {
            this.availableSeats = availableSeats;
        }
    }
  learner_created: true
- name: src/cinema/exception/SeatNotFoundException.java
  visible: true
  text: |
    package cinema.exception;

    import org.springframework.http.HttpStatus;
    import org.springframework.web.bind.annotation.ResponseStatus;

    @ResponseStatus(code = HttpStatus.NOT_FOUND)
    public class SeatNotFoundException extends RuntimeException {
        public SeatNotFoundException(String message) {
            super(message);
        }

    }
  learner_created: true
- name: src/cinema/exception/TokenNotFoundException.java
  visible: true
  text: |
    package cinema.exception;

    import org.springframework.http.HttpStatus;
    import org.springframework.web.bind.annotation.ResponseStatus;

    @ResponseStatus(code = HttpStatus.NOT_FOUND)
    public class TokenNotFoundException extends RuntimeException {
        public TokenNotFoundException(String message) {
            super(message);
        }
    }
  learner_created: true
- name: src/cinema/controller/MainController.java
  visible: true
  text: |
    package cinema.controller;

    import cinema.exception.PurchaseException;
    import cinema.exception.SeatNotFoundException;
    import cinema.exception.TokenNotFoundException;
    import cinema.exception.WrongPasswordException;
    import cinema.model.Seat;
    import cinema.service.MovieTheaterService;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.http.HttpStatus;
    import org.springframework.http.ResponseEntity;
    import org.springframework.web.bind.annotation.*;
    import java.util.Map;
    import java.util.concurrent.ConcurrentHashMap;

    @RestController
    public class MainController {

        @Autowired
        private MovieTheaterService movieTheater;

        //private ConcurrentHashMap<>

        @GetMapping("/seats")
        public ResponseEntity<MovieTheaterService> getSeat() {
            System.out.println("/seats");
            return new ResponseEntity<>(movieTheater, HttpStatus.OK);
        }

        @PostMapping("/purchase")
        //@ResponseBody
        public ResponseEntity<Map<String, Object>> bookSeat(@RequestBody Seat seat) {
            System.out.print("/purchase " + seat.toString());
            if (seat.getRow() < 1 || seat.getRow() > movieTheater.getTotalRows() || seat.getColumn() < 1 || seat.getColumn() > movieTheater.getTotalColumns()) {
                throw new SeatNotFoundException("The number of a row or a column is out of bounds!");
            }

            //seat.
            Seat removeSeat = movieTheater.findSeat(seat.getRow(), seat.getColumn());

            if (removeSeat != null) {
                movieTheater.getPurchasedSeats().put(removeSeat.getToken().toString(), removeSeat);
                movieTheater.getAvailableSeats().remove(removeSeat);
                System.out.println(" removeSeat " + removeSeat.getToken());
                return new ResponseEntity<>(Map.of( "ticket", Map.of("row", removeSeat.getRow(), "column", removeSeat.getColumn(), "price", removeSeat.getPrice()), "token", removeSeat.getToken()), HttpStatus.OK);
            }

            throw new PurchaseException("The ticket has been already purchased!");
        }

        @PostMapping("/return")
        public ResponseEntity<Map<String, Object>> returnSeat(@RequestBody String token) {
            System.out.println("/return " + token);
            Seat returnSeat;
            try {
                String tok = token.strip().split(":\"")[1].split("\"")[0];
                System.out.println(tok);
                returnSeat = movieTheater.findSeatByToken(tok);
                System.out.println("returnSeat " + returnSeat);
            } catch (Exception e) {
                throw new TokenNotFoundException("Wrong token!");
            }
            if (returnSeat != null) {
                movieTheater.getAvailableSeats().add(movieTheater.getPurchasedSeats().remove(returnSeat.getToken().toString()));
                return new ResponseEntity<>(Map.of("returned_ticket", Map.of("row", returnSeat.getRow(), "column", returnSeat.getColumn(), "price", returnSeat.getPrice())), HttpStatus.OK);
            }
            throw new TokenNotFoundException("Wrong token!");
        }

        @PostMapping("/stats")
        public ResponseEntity<Map<String, Integer>> getStat(@RequestParam String password) {
            if ("super_secret".equals(password)) {
                return new ResponseEntity<>(movieTheater.getStatistic(), HttpStatus.OK);
            }
            throw new WrongPasswordException("The password is wrong!");
        }


        @ExceptionHandler
        public ResponseEntity<ConcurrentHashMap<String, String>> handleAllException(Exception e){
            ConcurrentHashMap<String, String> response = new ConcurrentHashMap<>();
            String message = "";
            switch (e.getClass().getSimpleName()) {
                case "SeatNotFoundException":
                case "TokenNotFoundException":
                case "PurchaseException":
                case "WrongPasswordException":
                    message = e.getMessage();
                    break;
            }

            response.put("error", message);
            return new ResponseEntity<>(response, HttpStatus.BAD_REQUEST);
        }




    }
  learner_created: true
- name: src/cinema/exception/WrongPasswordException.java
  visible: true
  text: |
    package cinema.exception;

    import org.springframework.http.HttpStatus;
    import org.springframework.web.bind.annotation.ResponseStatus;

    @ResponseStatus(code = HttpStatus.BAD_REQUEST)
    public class WrongPasswordException extends RuntimeException {
        public WrongPasswordException(String message) {
            super(message);
        }

    }
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/13378#comment
status: Solved
feedback:
  message: Well done! You've finished the project. Select a new project on <a href="https://hyperskill.org/projects">JetBrains
    Academy</a> to continue learning.
  time: Sun, 04 Sep 2022 15:31:27 UTC
record: -1
